;; (require [basilisp.string :as basilisp.string])
;; (import os)
(ns usaco.sleepy-cow-herding
  (:require [basilisp.string :as str])
  (:import os))


(def *in-path* "usaco/src/usaco/sleepy-cow-herding/herding.in")
(def *out-path* "usaco/src/usaco/sleepy-cow-herding/herding.out")


(defn possible-moves [[x1 x2 x3]]
  [(range (inc x2) x3) [] (range (inc x1) x2)])


(defn swap [xs i j]
  (let [x (xs i)
        y (xs j)]
    (assoc xs i y j x)))


(defn move [xs i v]
  (cond
    (= i 0) (assoc (swap xs 0 1) 1 v)
    (= i 2) (assoc (swap xs 1 2) 1 v)
    :else (throw (Exception. "Invalid move"))))



(print "hello")

(rand-int 10)

(def xs (mapv int (str/split (slurp *in-path*) " ")))
xs

(move xs 0 8)


(possible-moves xs)


(os/getcwd)

(repeatedly 3 #(rand-int 10))

; [1 2 3] -> 0

; [1 5 8] 

(possible-moves [1 5 8])

(move [1 5 8] 0 6)
